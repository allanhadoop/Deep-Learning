# Source - http://www.scipy-lectures.org/intro/matplotlib/matplotlib.html
# Ipython - is an enhanced interactive Python shell that has lots of interesting 
# features including named inputs and outputs, access to shell commands, improved debugging .
# pyplot provides a procedural interface to the matplotlib object-oriented plotting library. 
# It is modeled closely after Matlab. Therefore, the majority of plotting commands in pyplot have Matlab™ analogs with similar arguments. 
------------------------------------------------------------
import numpy as np
import matplotlib.pyplot as plt
X = np.linspace(-np.pi,np.pi, 256, endpoint=True)    #start, stop,num,
# X is now a numpy array with 256 values ranging from -π to +π (included). C is the cosine (256 values) and S is the sine (256 values).
C, S = np.cos(X), np.sin(X)

plt.plot(X,C)
plt.plot(X,S)
plt.show()
Output --http://www.scipy-lectures.org/intro/matplotlib/auto_examples/plot_exercice_1.html 
------------------------------------------------------------
# Instantiating defaults
import numpy as np
import matplotlib.pyplot as plt

# Create a new figure of size 8x6 points, using 100 dots per inch
plt.figure(figsize=(8, 6), dpi=80)
# Create a new subplot from a grid of 1x1
plt.subplot(111)
X = np.linspace(-np.pi, np.pi, 256, endpoint=True)
C, S = np.cos(X), np.sin(X)

# Plot cosine using blue color with a continuous line of width 1 (pixels)
plt.plot(X, C, color="blue", linewidth=1.0, linestyle="-")
# Plot sine using green color with a continuous line of width 1 (pixels)
plt.plot(X, S, color="green", linewidth=1.0, linestyle="-")

# Set x limits
plt.xlim(-4., 4.)
# Set x ticks
plt.xticks(np.linspace(-4, 4, 9, endpoint=True))
# Set y limits
plt.ylim(-1.0, 1.0)
# Set y ticks
plt.yticks(np.linspace(-1, 1, 5, endpoint=True))
# Show result on screen
plt.show()
Output -- http://www.scipy-lectures.org/intro/matplotlib/auto_examples/plot_exercice_2.html
------------------------------------------------------------
# Changing colors and line widths
plt.plot(X, C, color="blue", linewidth=2.5, linestyle="-")
------------------------------------------------------------
# Setting limits
plt.figure(figsize=(8, 5), dpi=80)
plt.subplot(111)

X = np.linspace(-np.pi, np.pi, 256, endpoint=True)
S = np.sin(X)
C = np.cos(X)
plt.plot(X, C, color="blue", linewidth=2.5, linestyle="-")
plt.plot(X, S, color="red", linewidth=2.5, linestyle="-")

plt.xlim(X.min() * 1.1, X.max() * 1.1)
plt.ylim(C.min() * 1.1, C.max() * 1.1)
plt.show()
Output -- http://www.scipy-lectures.org/intro/matplotlib/auto_examples/plot_exercice_4.html
------------------------------------------------------------
# Setting ticks - basically indicating on scale where is the value of X or C or S
Current ticks are not ideal because they do not show the interesting values (+/-π,+/-π/2) for sine and cosine
plt.xticks([-np.pi, -np.pi/2, 0, np.pi/2, np.pi])
plt.yticks([-1, 0, +1])
Output -- http://www.scipy-lectures.org/intro/matplotlib/auto_examples/plot_exercice_5.html
------------------------------------------------------------
# Setting tick labels
plt.xticks([-np.pi,-np.pi/2,0,np.pi,np.pi/2],[r'$-\pi$',r'$-\pi/2$,0',r'$0$',r'$+\pi$',r'$+\pi/2$'])
plt.yticks([-1,0,1],[r'$-1$',r'$0$',r'$1$'])
Output - http://www.scipy-lectures.org/intro/matplotlib/auto_examples/plot_exercice_6.html
------------------------------------------------------------
# Moving spines
ax = plt.gca()         #gca - get current axis 
ax.spines['right'].set_color('none')     #means data is not printed on right side of y axis
ax.spines['top'].set_color('none')       #means data is not printed on top side of x axis
ax.xaxis.set_ticks_position('bottom')
ax.spines['bottom'].set_position(('data',0))  #means data is printed on bottom side of x axis
ax.yaxis.set_ticks_position('left')
ax.spines['left'].set_position(('data',0))  #means data is printed on left side of y axis
Output -- http://www.scipy-lectures.org/intro/matplotlib/auto_examples/plot_exercice_7.html
------------------------------------------------------------
# Adding a legend
plt.plot(X, C, color="blue", linewidth=2.5, linestyle="-", label="Cosine")
plt.plot(X, S, color="red", linewidth=2.5, linestyle="-", label="Sine")
plt.legend(loc='upper left')
Output -- http://www.scipy-lectures.org/intro/matplotlib/auto_examples/plot_exercice_8.html
------------------------------------------------------------
# Annotate some points
We chose the 2π/3 value and we want to annotate both the sine and the cosine. 
1. We’ll first draw a marker on the curve as well as a 
2. draw straight dotted line. Then, 
3. we’ll use the annotate command to display some text with an arrow.
t = 2 * np.pi / 3
plt.plot([t, t], [0, np.cos(t)], color='blue', linewidth=2.5, linestyle="--")
plt.scatter([t, ], [np.cos(t), ], 50, color='blue')

plt.annotate(r'$sin(\frac{2\pi}{3})=\frac{\sqrt{3}}{2}$',
             xy=(t, np.sin(t)), xycoords='data',
             xytext=(+10, +30), textcoords='offset points', fontsize=16,
             arrowprops=dict(arrowstyle="->", connectionstyle="arc3,rad=.2"))

plt.plot([t, t],[0, np.sin(t)], color='red', linewidth=2.5, linestyle="--")
plt.scatter([t, ],[np.sin(t), ], 50, color='red')

plt.annotate(r'$cos(\frac{2\pi}{3})=-\frac{1}{2}$',
             xy=(t, np.cos(t)), xycoords='data',
             xytext=(-90, -50), textcoords='offset points', fontsize=16,
             arrowprops=dict(arrowstyle="->", connectionstyle="arc3,rad=.2"))

Output -- http://www.scipy-lectures.org/intro/matplotlib/auto_examples/plot_exercice_9.html
------------------------------------------------------------
# Figures, Subplots, Axes and Ticks
A “figure” in matplotlib means the whole window in the user interface. Within this figure there can be “subplots”.




------------------------------------------------------------
# Source - http://matplotlib.org/users/pyplot_tutorial.html
## better source - https://www.labri.fr/perso/nrougier/teaching/matplotlib/
# Each pyplot function makes some change to a figure: e.g., creates a figure, 
# creates a plotting area in a figure, plots some lines in a plotting area, decorates the plot with labels, etc
# axes meaning part of a figure, not axis like x or y axis
# MATLAB, and pyplot, have the concept of the current figure and the current axes.
------------------------------------------------------------
import matplotlib.pyplot as plt
plt.plot([1,2,3,4])
plt.ylabel('this is y label')
plt.show()
Output at -- http://matplotlib.org/users/pyplot_tutorial.html
------------------------------------------------------------
import matplotlib.pyplot as plt
plt.plot([1,2,3,4],[1,4,9,16])  #so here first [] is x axis and second [] is y axis
plt.ylabel('this is y label')
plt.show()
Output -- will change to curve line -- run and see
------------------------------------------------------------
import matplotlib.pyplot as plt
plt.plot([1,2,3,4], [1,4,9,16], 'ro')  #ro for red color
plt.axis([0, 6, 0, 20])   #(xmin, xmax, ymin, ymax). axis command specifies the viewport of the axes
plt.show()
------------------------------------------------------------
# mumpy arrays 
import matplotlib.pyplot as plt
import numpy as np

t = np.arange(0.,5.,0.2)  #start/stop/interval of 200 ms.
plt.plot(t,t,'r--',t,t**2,'bs',t,t**3,'g^')  #r-- red, bs -blue . g^ green colors
#t is line, t**2 is square and t**3 is triangle
plt.show()
------------------------------------------------------------
# controlling line properties (linewidth, dash style, antialiased, etc) / matplotlib.lines.Line2D.
# Line properties - http://matplotlib.org/users/pyplot_tutorial.html
import numpy as np
import matplotlib.pyplot as plt

def f(t):
    return np.exp(-t) * np.cos(2*np.pi*t)

t1 = np.arange(0.0, 5.0, 0.1)
t2 = np.arange(0.0, 5.0, 0.02)

plt.figure(1)   #figure() is optional ,by default it is created
plt.subplot(211)  #subplot(211) equals to subplot ( 2 1 1 ) meaning numrows, numcol, figure number
plt.plot(t1, f(t1), 'bo', t2, f(t2), 'k')

plt.subplot(211)   # so if we make 212 then last 2 meaning second figure. but if we make 211 then last 1 meaning same figure as above
plt.plot(t2, np.cos(2*np.pi*t2), 'r--')
plt.show()
Output ---see at http://matplotlib.org/users/pyplot_tutorial.html
------------------------------------------------------------
# Labeling xlable, ylabel, title, text, grid etc
import numpy as np
import matplotlib.pyplot as plt

mu, sigma = 100, 15
x = mu + sigma * np.random.randn(10000)

# the histogram of the data
n, bins, patches = plt.hist(x, 50, normed=1, facecolor='g', alpha=0.75)

plt.xlabel('Smarts')
plt.ylabel('Probability')
plt.title('Histogram of IQ')
plt.text(60, .025, r'$\mu=100,\ \sigma=15$')
plt.axis([40, 160, 0, 0.03])
plt.grid(True)
plt.show()
Output ---see at http://matplotlib.org/users/pyplot_tutorial.html
------------------------------------------------------------
# Annotating text -he uses of the basic text() command above place text at an arbitrary position on the Axes. 
# A common use for text is to annotate some feature of the plot, and the annotate() method provides helper 
# functionality to make annotations easy
import numpy as np
import matplotlib.pyplot as plt

ax = plt.subplot(111)

t = np.arange(0.0, 5.0, 0.01)
s = np.cos(2*np.pi*t)
line, = plt.plot(t, s, lw=2)

plt.annotate('local maxoint', xy=(2, 1), xytext=(3, 1.5),
            arrowprops=dict(facecolor='black', shrink=0.05),
            )

plt.ylim(-3,4)  #limit y axis to -2 2 dimension
plt.show()
Output ---see at http://matplotlib.org/users/pyplot_tutorial.html
------------------------------------------------------------








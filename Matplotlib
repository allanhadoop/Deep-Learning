# Source - http://www.scipy-lectures.org/intro/matplotlib/matplotlib.html
# Ipython - is an enhanced interactive Python shell that has lots of interesting 
# features including named inputs and outputs, access to shell commands, improved debugging .
# pyplot provides a procedural interface to the matplotlib object-oriented plotting library. 
# It is modeled closely after Matlab. Therefore, the majority of plotting commands in pyplot have Matlab™ analogs with similar arguments. 
------------------------------------------------------------
Editor help using below command.e.g.
import matplotlib.pyplot as plt
print(help(plt.plot))
------------------------------------------------------------
import numpy as np
import matplotlib.pyplot as plt
X = np.linspace(-np.pi,np.pi, 256, endpoint=True)    #start, stop,num,
# X is now a numpy array with 256 values ranging from -π to +π (included). C is the cosine (256 values) and S is the sine (256 values).
C, S = np.cos(X), np.sin(X)

plt.plot(X,C)
plt.plot(X,S)
plt.show()
Output --http://www.scipy-lectures.org/intro/matplotlib/auto_examples/plot_exercice_1.html 
------------------------------------------------------------
# Instantiating defaults
import numpy as np
import matplotlib.pyplot as plt

# Create a new figure of size 8x6 points, using 100 dots per inch
plt.figure(figsize=(8, 6), dpi=80)
# Create a new subplot from a grid of 1x1
plt.subplot(111)
X = np.linspace(-np.pi, np.pi, 256, endpoint=True)
C, S = np.cos(X), np.sin(X)

# Plot cosine using blue color with a continuous line of width 1 (pixels)
plt.plot(X, C, color="blue", linewidth=1.0, linestyle="-")
# Plot sine using green color with a continuous line of width 1 (pixels)
plt.plot(X, S, color="green", linewidth=1.0, linestyle="-")

# Set x limits
plt.xlim(-4., 4.)
# Set x ticks
plt.xticks(np.linspace(-4, 4, 9, endpoint=True))
# Set y limits
plt.ylim(-1.0, 1.0)
# Set y ticks
plt.yticks(np.linspace(-1, 1, 5, endpoint=True))
# Show result on screen
plt.show()
Output -- http://www.scipy-lectures.org/intro/matplotlib/auto_examples/plot_exercice_2.html
------------------------------------------------------------
# Changing colors and line widths
plt.plot(X, C, color="blue", linewidth=2.5, linestyle="-")
------------------------------------------------------------
# Setting limits
plt.figure(figsize=(8, 5), dpi=80)
plt.subplot(111)

X = np.linspace(-np.pi, np.pi, 256, endpoint=True)
S = np.sin(X)
C = np.cos(X)
plt.plot(X, C, color="blue", linewidth=2.5, linestyle="-")
plt.plot(X, S, color="red", linewidth=2.5, linestyle="-")

plt.xlim(X.min() * 1.1, X.max() * 1.1)
plt.ylim(C.min() * 1.1, C.max() * 1.1)
plt.show()
Output -- http://www.scipy-lectures.org/intro/matplotlib/auto_examples/plot_exercice_4.html
------------------------------------------------------------
# Setting ticks - basically indicating on scale where is the value of X or C or S
Current ticks are not ideal because they do not show the interesting values (+/-π,+/-π/2) for sine and cosine
plt.xticks([-np.pi, -np.pi/2, 0, np.pi/2, np.pi])
plt.yticks([-1, 0, +1])
Output -- http://www.scipy-lectures.org/intro/matplotlib/auto_examples/plot_exercice_5.html
------------------------------------------------------------
# Setting tick labels
plt.xticks([-np.pi,-np.pi/2,0,np.pi,np.pi/2],[r'$-\pi$',r'$-\pi/2$,0',r'$0$',r'$+\pi$',r'$+\pi/2$'])
plt.yticks([-1,0,1],[r'$-1$',r'$0$',r'$1$'])
Output - http://www.scipy-lectures.org/intro/matplotlib/auto_examples/plot_exercice_6.html
------------------------------------------------------------
# Moving spines
ax = plt.gca()         #gca - get current axis 
ax.spines['right'].set_color('none')     #means data is not printed on right side of y axis
ax.spines['top'].set_color('none')       #means data is not printed on top side of x axis
ax.xaxis.set_ticks_position('bottom')
ax.spines['bottom'].set_position(('data',0))  #means data is printed on bottom side of x axis
ax.yaxis.set_ticks_position('left')
ax.spines['left'].set_position(('data',0))  #means data is printed on left side of y axis
Output -- http://www.scipy-lectures.org/intro/matplotlib/auto_examples/plot_exercice_7.html
------------------------------------------------------------
# Adding a legend
plt.plot(X, C, color="blue", linewidth=2.5, linestyle="-", label="Cosine")
plt.plot(X, S, color="red", linewidth=2.5, linestyle="-", label="Sine")
plt.legend(loc='upper left')
Output -- http://www.scipy-lectures.org/intro/matplotlib/auto_examples/plot_exercice_8.html
------------------------------------------------------------
# Annotate some points
We chose the 2π/3 value and we want to annotate both the sine and the cosine. 
1. We’ll first draw a marker on the curve as well as a 
2. draw straight dotted line. Then, 
3. we’ll use the annotate command to display some text with an arrow.
t = 2 * np.pi / 3
plt.plot([t, t], [0, np.cos(t)], color='blue', linewidth=2.5, linestyle="--")
plt.scatter([t, ], [np.cos(t), ], 50, color='blue')

plt.annotate(r'$sin(\frac{2\pi}{3})=\frac{\sqrt{3}}{2}$',
             xy=(t, np.sin(t)), xycoords='data',
             xytext=(+10, +30), textcoords='offset points', fontsize=16,
             arrowprops=dict(arrowstyle="->", connectionstyle="arc3,rad=.2"))

plt.plot([t, t],[0, np.sin(t)], color='red', linewidth=2.5, linestyle="--")
plt.scatter([t, ],[np.sin(t), ], 50, color='red')

plt.annotate(r'$cos(\frac{2\pi}{3})=-\frac{1}{2}$',
             xy=(t, np.cos(t)), xycoords='data',
             xytext=(-90, -50), textcoords='offset points', fontsize=16,
             arrowprops=dict(arrowstyle="->", connectionstyle="arc3,rad=.2"))

Output -- http://www.scipy-lectures.org/intro/matplotlib/auto_examples/plot_exercice_9.html
------------------------------------------------------------
# Figures, Subplots, Axes and Ticks
A “figure” in matplotlib means the whole window in the user interface. Within this figure there can be “subplots”.
While subplot positions the plots in a regular grid, axes allows free placement within the figure. 
When we call plot, matplotlib calls gca() to get the current axes and gca in turn calls gcf() to get the current figure. 
If there is none it calls figure() to make one, strictly speaking, to make a subplot(111).   

plt.figure(1,figsize=(8,6),dpi=60,facecolor="green",edgecolor="red",frameon=True)     # here 1 is figure number 1
plt.close(1)   # to close figure 1
------------------------------------------------------------
# SUbplot -- With subplot you can arrange plots in a regular grid. You need to specify the number of rows and 
# columns and the number of the plot
plt.figure(figsize=(6, 4))
plt.subplot(2, 2, 1)   # This is like array 2 means 2 horizontal row and second 2 means 2 vertical columns. 1 means first subplot within plot      
plt.text(0.5, 0.5, 'subplot(2,2,1)', ha='center', va='center',size=24, alpha=.5)

plt.subplot(2, 2, 2)   # This is like array 2 means 2 horizontal row and second 2 means 2 vertical columns. 2 means second subplot within plot 
plt.text(0.5, 0.5, 'subplot(2,2,2)', ha='center', va='center',size=24, alpha=.5)

plt.subplot(2, 2, 3)  # This is like array 2 means 2 horizontal row and second 2 means 2 vertical columns. 3 means third subplot within plot 
plt.text(0.5, 0.5, 'subplot(2, 2, 3)', ha='center', va='center',size=24, alpha=.5)

plt.subplot(2, 2, 4)  # This is like array 2 means 2 horizontal row and second 2 means 2 vertical columns. 4 means fourth subplot within plot 
plt.text(0.5, 0.5, 'subplot(2, 2, 4)', ha='center', va='center',size=24, alpha=.5)

plt.tight_layout()
plt.show()
Output -- http://www.scipy-lectures.org/intro/matplotlib/auto_examples/plot_subplot-grid.html
------------------------------------------------------------
# GridSpec
import matplotlib.pyplot as plt
import matplotlib.gridspec as gridspec

plt.figure(figsize=(6, 4))
G = gridspec.GridSpec(3, 3)    # 3,3 indicates how many rows and columns in the plot. here we have 3 rows and 3 colms.

axes_1 = plt.subplot(G[0, :])   # specifiy plot poisition using row and column - 0, means from 0 index row till end and : means all
plt.xticks(())
plt.yticks(())
plt.text(0.5, 0.5, 'Axes 1', ha='center', va='center', size=24, alpha=.5)

axes_2 = plt.subplot(G[1, :-1])     #specifiy plot poisition using row and column - here 1, means from from 1 index row till all colms and -1 for last column minus 1
plt.xticks(())
plt.yticks(())
plt.text(0.5, 0.5, 'Axes 2', ha='center', va='center', size=24, alpha=.5)

axes_3 = plt.subplot(G[1:, -1]) # specifiy plot poisition using row and column so here 1: means 1 index row onwards all and last column minus 1
plt.xticks(())
plt.yticks(())
plt.text(0.5, 0.5, 'Axes 3', ha='center', va='center', size=24, alpha=.5)

axes_4 = plt.subplot(G[2, 0])   # play by changing number.. 
plt.xticks(())
plt.yticks(())
plt.text(0.5, 0.5, 'Axes 4', ha='center', va='center', size=24, alpha=.5)

axes_5 = plt.subplot(G[2, -2])
plt.xticks(())
plt.yticks(())
plt.text(0.5, 0.5, 'Axes 5', ha='center', va='center', size=24, alpha=.5)

plt.tight_layout()
plt.show()
Output ---http://www.scipy-lectures.org/intro/matplotlib/auto_examples/plot_gridspec.html
------------------------------------------------------------
# Axes - Axes are very similar to subplots but allow placement of plots at any location in the figure. 
# So if we want to put a smaller plot inside a bigger one we do so with axes
import matplotlib.pyplot as plt
plt.axes([.1, .1, .8, .8])        # here .1 and .1 is row and column and .8 /.8 is just a size of the subplot.
plt.xticks(())
plt.yticks(())
plt.text(.6, .6, 'axes([0.1, 0.1, .8, .8])', ha='center', va='center',size=20, alpha=.5)

plt.axes([.2, .2, .3, .3])   # here .2 and .2 is row and column and .3 /.3 is just a size of the subplot.
plt.xticks(())          # empty ticks , otherwise , plot will print all numbers
plt.yticks(())          # empty ticks
plt.text(.5, .5, 'axes([0.2, 0.2, .3, .3])', ha='center', va='center',size=16, alpha=.5) 
plt.show()
Output -- http://www.scipy-lectures.org/intro/matplotlib/auto_examples/plot_axes.html
------------------------------------------------------------
# Ticks -- Locator - All of these locators derive from the base class matplotlib.ticker.Locator. 
import numpy as np
import matplotlib.pyplot as plt

def tickline():
    plt.xlim(0, 10), plt.ylim(-1, 1), plt.yticks([])
    ax = plt.gca()                      #get current axis
    ax.spines['right'].set_color('none')
    ax.spines['left'].set_color('none')
    ax.spines['top'].set_color('none')
    ax.xaxis.set_ticks_position('bottom')      # this wil place ticks on botton of the plot name
    ax.spines['bottom'].set_position(('data',0))
    ax.yaxis.set_ticks_position('none')
    ax.xaxis.set_minor_locator(plt.MultipleLocator(0.1))   #this puts small upper lines at 0.1 on all plots
    ax.plot(np.arange(10), np.zeros(10))
    return ax

locators = [
                'plt.NullLocator()',
                'plt.MultipleLocator(1.0)',
                'plt.FixedLocator([0, 2, 8, 9, 10])',
                'plt.IndexLocator(3, 1)',
                'plt.LinearLocator(5)',
                'plt.LogLocator(2, [1.0])',
                'plt.AutoLocator()',
            ]
n_locators = len(locators)
size = 512, 40 * n_locators    # size = (512, 280)
dpi = 72.0
figsize = size[0] / float(dpi), size[1] / float(dpi)
fig = plt.figure(figsize=figsize, dpi=dpi)
fig.patch.set_alpha(0)

for i, locator in enumerate(locators):
    plt.subplot(n_locators, 1, i + 1)
    ax = tickline()
    ax.xaxis.set_major_locator(eval(locator))
    plt.text(5, 0.3, locator[3:], ha='center')

plt.subplots_adjust(bottom=.01, top=.99, left=.01, right=.99)
plt.show()
Output -- http://www.scipy-lectures.org/intro/matplotlib/auto_examples/plot_ticks.html
------------------------------------------------------------
# Other types of Plots -- Regular plot, Scatter plot, Bar plot, Contour plot, Imshow, pie chart , Quiver plot, Grids, multiplot, polar axis, 
# 3D Plots , 
---------------------------------Regular plot -- 
n = 256
X = np.linspace(-np.pi, np.pi , n, endpoint=True)
Y = np.sin(2 * X)
plt.plot(X, Y)
plt.fill_between(X,0,Y)   #so 0 is an N-length array (or scalar) of the y data
plt.show()
Output -- http://www.scipy-lectures.org/intro/matplotlib/auto_examples/plot_plot_ex.html
---------------------------------Scatter Plots -- 
n = 1024
X = np.random.normal(0, 1, n)
Y = np.random.normal(0, 1, n)  
plt.scatter(X, Y) #http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.scatter
plt.show()
Output -- http://www.scipy-lectures.org/intro/matplotlib/auto_examples/plot_scatter_ex.html
---------------------------------Bar Plots -- 
n = 12
X = np.arange(n)
Y1 = (1 - X / float(n)) * np.random.uniform(0.5,1.0,n) 
plt.bar(X,+Y1)
plt.show()
Output -- http://www.scipy-lectures.org/intro/matplotlib/auto_examples/plot_bar_ex.html
---------------------------------Contour Plots -- 
# contour() and contourf() draw contour lines and filled contours
def f(x,y):
    return (1 - x / 2 + x**5 + y**3) * np.exp(-x**2 -y**2)
n = 256
x = np.linspace(-3, 3, n)
y = np.linspace(-3, 3, n)
X,Y = np.meshgrid(x, y)    #Return coordinate matrices from coordinate vectors.

plt.contourf(X, Y, f(X, Y)) 
plt.show()
Output -- http://www.scipy-lectures.org/intro/matplotlib/auto_examples/plot_contour_ex.html
---------------------------------Pie Charts -- 
n = 20
Z = np.ones(n)
plt.pie(Z)
plt.show()
Output -- http://www.scipy-lectures.org/intro/matplotlib/auto_examples/plot_pie_ex.html
---------------------------------Grids-- 

ax = plt.axes([0.025, 0.025, 0.95, 0.95])
ax.set_xlim(0,4)
ax.set_ylim(0,3)
ax.xaxis.set_major_locator(plt.MultipleLocator(1.0))
ax.xaxis.set_minor_locator(plt.MultipleLocator(0.1))
ax.yaxis.set_major_locator(plt.MultipleLocator(1.0))
ax.yaxis.set_minor_locator(plt.MultipleLocator(0.1))
ax.grid(which='major', axis='x', linewidth=0.75)
ax.grid(which='minor', axis='x', linewidth=0.25)
ax.grid(which='major', axis='y', linewidth=0.75)
ax.grid(which='minor', axis='y', linewidth=0.25)
ax.set_xticklabels([])
ax.set_yticklabels([])
plt.show()
Output -- http://www.scipy-lectures.org/intro/matplotlib/auto_examples/plot_grid_ex.html
------------------------------------------------------------
# Source - http://matplotlib.org/users/pyplot_tutorial.html
## better source - https://www.labri.fr/perso/nrougier/teaching/matplotlib/
# Each pyplot function makes some change to a figure: e.g., creates a figure, 
# creates a plotting area in a figure, plots some lines in a plotting area, decorates the plot with labels, etc
# axes meaning part of a figure, not axis like x or y axis
# MATLAB, and pyplot, have the concept of the current figure and the current axes.
------------------------------------------------------------
import matplotlib.pyplot as plt
plt.plot([1,2,3,4])
plt.ylabel('this is y label')
plt.show()
Output at -- http://matplotlib.org/users/pyplot_tutorial.html
------------------------------------------------------------
import matplotlib.pyplot as plt
plt.plot([1,2,3,4],[1,4,9,16])  #so here first [] is x axis and second [] is y axis
plt.ylabel('this is y label')
plt.show()
Output -- will change to curve line -- run and see
------------------------------------------------------------
import matplotlib.pyplot as plt
plt.plot([1,2,3,4], [1,4,9,16], 'ro')  #ro for red color
plt.axis([0, 6, 0, 20])   #(xmin, xmax, ymin, ymax). axis command specifies the viewport of the axes
plt.show()
------------------------------------------------------------
# mumpy arrays 
import matplotlib.pyplot as plt
import numpy as np

t = np.arange(0.,5.,0.2)  #start/stop/interval of 200 ms.
plt.plot(t,t,'r--',t,t**2,'bs',t,t**3,'g^')  #r-- red, bs -blue . g^ green colors
#t is line, t**2 is square and t**3 is triangle
plt.show()
------------------------------------------------------------
# controlling line properties (linewidth, dash style, antialiased, etc) / matplotlib.lines.Line2D.
# Line properties - http://matplotlib.org/users/pyplot_tutorial.html
import numpy as np
import matplotlib.pyplot as plt

def f(t):
    return np.exp(-t) * np.cos(2*np.pi*t)

t1 = np.arange(0.0, 5.0, 0.1)
t2 = np.arange(0.0, 5.0, 0.02)

plt.figure(1)   #figure() is optional ,by default it is created
plt.subplot(211)  #subplot(211) equals to subplot ( 2 1 1 ) meaning numrows, numcol, figure number
plt.plot(t1, f(t1), 'bo', t2, f(t2), 'k')

plt.subplot(211)   # so if we make 212 then last 2 meaning second figure. but if we make 211 then last 1 meaning same figure as above
plt.plot(t2, np.cos(2*np.pi*t2), 'r--')
plt.show()
Output ---see at http://matplotlib.org/users/pyplot_tutorial.html
------------------------------------------------------------
# Labeling xlable, ylabel, title, text, grid etc
import numpy as np
import matplotlib.pyplot as plt

mu, sigma = 100, 15
x = mu + sigma * np.random.randn(10000)

# the histogram of the data
n, bins, patches = plt.hist(x, 50, normed=1, facecolor='g', alpha=0.75)

plt.xlabel('Smarts')
plt.ylabel('Probability')
plt.title('Histogram of IQ')
plt.text(60, .025, r'$\mu=100,\ \sigma=15$')
plt.axis([40, 160, 0, 0.03])
plt.grid(True)
plt.show()
Output ---see at http://matplotlib.org/users/pyplot_tutorial.html
------------------------------------------------------------
# Annotating text -he uses of the basic text() command above place text at an arbitrary position on the Axes. 
# A common use for text is to annotate some feature of the plot, and the annotate() method provides helper 
# functionality to make annotations easy
import numpy as np
import matplotlib.pyplot as plt

ax = plt.subplot(111)

t = np.arange(0.0, 5.0, 0.01)
s = np.cos(2*np.pi*t)
line, = plt.plot(t, s, lw=2)

plt.annotate('local maxoint', xy=(2, 1), xytext=(3, 1.5),
            arrowprops=dict(facecolor='black', shrink=0.05),
            )

plt.ylim(-3,4)  #limit y axis to -2 2 dimension
plt.show()
Output ---see at http://matplotlib.org/users/pyplot_tutorial.html
------------------------------------------------------------
# Image tutorials - http://matplotlib.org/users/image_tutorial.html







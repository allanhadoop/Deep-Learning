# source - Python Numpy module -- source http://cs231n.github.io/python-numpy-tutorial/
# Numpy reference document - https://docs.scipy.org/doc/numpy/reference/
# All Numpy functions are at - https://docs.scipy.org/doc/numpy/reference/routines.array-manipulation.html

Numpy is the core library for scientific computing in Python. It provides a high-performance 
multidimensional array object, and tools for working with these arrays.
# A numpy array is a grid of values, all of the same type, and is indexed by a tuple of nonnegative integers. 
The number of dimensions is the rank of the array; the shape of an array is a tuple of integers giving the size 
of the array along each dimension.
------------------------------------------------------------------------------------------------------------
We can initialize numpy arrays from nested Python lists, and access elements using square brackets:
here within bracket it is column


import numpy as np
a = np.array([1,3,5])
print(a.shape)
print(a[0],a[1],a[2])
print("---------------")
b = np.array( [  [3,5,2],[6,8,23] ] )       #see outer bracket for syntax
print(b.shape)
print(b[0,2],b[0,1],b[1,0],b[1,2])       # here d is read as first digit is - two columns(0,1 index) and second digit is 3 rows within column(0,1,2 index) e.g. [0,2]
Output -- 
(3,)
(1, 3, 5)
---------------
(2, 3)
(2, 5, 6, 23)
------------------------------------------------------------------------------------------------------------
# what is numpy_r ? - Translates slice objects to concatenation along the first axis.
import numpy as np
n = np.r_[np.array([1,2,3]), 0, 0, np.array([4,5,6])]
print(n)
Output -- [1 2 3 0 0 4 5 6]
----
np.r_[-1:1:6j, [0]*3, 5, 6]
Output -- [-1.  -0.6 -0.2  0.2  0.6  1.   0.   0.   0.   5.   6. ]
----Check more examples at https://docs.scipy.org/doc/numpy/reference/generated/numpy.r_.html
------------------------------------------------------------------------------------------------------------
# Numpy also provides many functions to create arrays:
import numpy as np
a = np.zeros((2, 2))  # Create an array of all zeros
print a

b = np.ones((2, 2))  # Create an array of all ones
print b

c = np.full((2, 2), 100)  # Create a constant array
print c

d = np.eye(2)  # Create a 2x2 identity matrix
print d

e = np.random.random((2, 2))  # Create an array filled with random values
print e
Output --
[[ 0.  0.]
 [ 0.  0.]]
 
[[ 1.  1.]
 [ 1.  1.]]
 
[[ 100.  100.]
 [ 100.  100.]]

[[ 1.  0.]
 [ 0.  1.]]

[[ 0.53194896  0.88849381]
 [ 0.9743469   0.40803588]]
------------------------------------------------------------------------------------------------------------
# Array Indexing -- Numpy offers several ways to index into arrays.
Similar to Python lists, numpy arrays can be sliced. Since arrays may be multidimensional, 
you must specify a slice for each dimension of the array:
import numpy as np

# Create the following rank 2 array with shape (3, 4)
# [[ 1  2  3  4]
#  [ 5  6  7  8]
#  [ 9 10 11 12]]
a = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])

# Use slicing to pull out the subarray consisting of the first 2 rows
# and columns 1 and 2; b is the following array of shape (2, 2):
# [[2 3]
#  [6 7]]
b = a[0:2, 1:3]     #0:2 is first 2 rows and 1:3 is within those 2 rows (it prints upto 1 , doesnot go to 2 index), 1 till 3rd column (it prints upto 2 index, not 3) . O is first column
print(b)

# A slice of an array is a view into the same data, so modifying it will modify the original array.
print a[0, 1]   # Prints "2"

b[0, 0] = 77    # b[0, 0] is the same piece of data as a[0, 1]
print a[0, 1]   # Prints "77"
print(a)
Output -- ------
[[2 3]
 [6 7]]
2
77
[[ 1 77  3  4]
 [ 5  6  7  8]
 [ 9 10 11 12]]
------------------------------------------------------------------------------------------------------------
a = np.array([[3,2,3,5,6],[4,2,3,5,7],[5,5,3,2,4]])
print(a)

b = a[1:3,1:4]      #1:3 means from second and third rows and 1:4 means from 1 till 3 to be printed columns within those 2 rows.
print(b)

b[1,1] = 88
print(a)
Output ------- 
[[3 2 3 5 6]
 [4 2 3 5 7]
 [5 5 3 2 4]]
[[2 3 5]
 [5 3 2]]
[[ 3  2  3  5  6]
 [ 4  2  3  5  7]
 [ 5  5 88  2  4]]
------------------------------------------------------------------------------------------------------------
# Mixing integer indexing with slice indexing. However, doing so will yield an array of lower rank than the 
original array. Note that this is quite different from the way that MATLAB handles array slicing

import numpy as np

# Create the following rank 2 array with shape (3, 4)
# [[ 1  2  3  4]
#  [ 5  6  7  8]
#  [ 9 10 11 12]]
a = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])

# Two ways of accessing the data in the middle row of the array.
# Mixing integer indexing with slices yields an array of lower rank,
# while using only slices yields an array of the same rank as the
# original array:
row_r1 = a[1, :]    # Rank 1 view of the second row of a     --> SEE the syntax of slice index  [ : , : ]  
row_r2 = a[1:2, :]  # Rank 2 view of the second row of a     --> SEE the syntax of slice index  [ : , : ]  
print row_r1, row_r1.shape  # Prints "[5 6 7 8] (4,)"
print row_r2, row_r2.shape  # Prints "[[5 6 7 8]] (1, 4)"

# We can make the same distinction when accessing columns of an array:
col_r1 = a[:, 1]
col_r2 = a[:, 1:2]
print col_r1, col_r1.shape  # Prints "[ 2  6 10] (3,)"
print col_r2, col_r2.shape  # Prints "[[ 2]
                            #          [ 6]
                            #          [10]] (3, 1)"
col_r2[2] = 99
print(a)
Output --------
[5 6 7 8] (4,)
[[5 6 7 8]] (1, 4)
[ 2  6 10] (3,)
[[ 2]
 [ 6]
 [10]] (3, 1)
 [[ 1  2  3  4]
 [ 5  6  7  8]
 [ 9 99 11 12]]
------------------------------------------------------------------------------------------------------------
# Integer array indexing -- When you index into numpy arrays using slicing, the resulting array view will 
always be a subarray of the original array.  In contrast, integer array indexing allows you to construct 
arbitrary arrays using the data from another array.

import numpy as np

a = np.array([[1,2], [3, 4], [5, 6]])
print(a)
print("----------")
print(a.shape)
print("----------")
# An example of integer array indexing.
# The returned array will have shape (3,) and
print a[[1, 2, 0], [0, 1, 1]]                      --> SEE the syntax of integer index [ [ ...] ] 
# [[ 1 , 2 , 0 ]] means array is indexed using 1st row then 2nd and then 0th
# [[ 0, 1 ,1 ]] means we get further indexing of the respective columns.e.g. 1st row will get 0 index number (which is 3
# then 2nd row will get 1st index digit which is 6 and 0th row will get 1st index digit which is 2

# The above example of integer array indexing is equivalent to this:
# print np.array([a[0, 0], a[1, 1], a[2, 0]])  # Prints "[1 4 5]"

# When using integer array indexing, you can reuse the same
# element from the source array:
print a[[1, 2], [1, 1]]                     --> SEE the syntax of integer index [ [ ...] ] 

OUTPUT -- 
[[1 2]
 [3 4]
 [5 6]]
----------
(3, 2)
----------
[3 6 2]
[4 6]
------------------------------------------------------------------------------------------------------------
# One useful trick with integer array indexing is selecting or mutating one element from each row of a matrix:
import numpy as np

# Create a new array from which we will select elements
a = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])

print a  # prints "array([[ 1,  2,  3],
         #                [ 4,  5,  6],
         #                [ 7,  8,  9],
         #                [10, 11, 12]])"

# Create an array of indices
b = np.array([0, 2, 0, 1])

# Select one element from each row of a using the indices in b
print a[np.arange(4), b]  # Prints "[ 1  6  7 11]"              -->>SEE Syntax [ np.arrange(x), b ]

# Mutate one element from each row of a using the indices in b
a[np.arange(4), b] += 10

print a  # prints "array([[11,  2,  3],
         #                [ 4,  5, 16],
         #                [17,  8,  9],
         #                [10, 21, 12]])
------------------------------------------------------------------------------------------------------------
a = np.array([[3,4,6], [2,7,2], [6,2,8]])
print(a)
b = np.array([0,1,0])
print(a[np.arange(3),b])
[[3 4 6]
 [2 7 2]
 [6 2 8]]
[3 7 6]
------------------------------------------------------------------------------------------------------------
Syntax below will get error - 
a = np.array([3,4,6], [2,7,2], [6,2,8])   -->ERROR ValueError: only 2 non-keyword arguments accepted
Correct syntax is below 
a = np.array([[3,4,6], [2,7,2], [6,2,8]])  
------------------------------------------------------------------------------------------------------------
# Boolean array indexing: Boolean array indexing lets you pick out arbitrary elements of an array. 
Frequently this type of indexing is used to select the elements of an array that satisfy some condition.
import numpy as np

a = np.array([[1,2], [3, 4], [5, 6]])
bool_idx = (a > 2)  # Find the elements of a that are bigger than 2;
                    # this returns a numpy array of Booleans of the same
                    # shape as a, where each slot of bool_idx tells
                    # whether that element of a is > 2.
            
print bool_idx      # Prints "[[False False]
                    #          [ True  True]
                    #          [ True  True]]"

# We use boolean array indexing to construct a rank 1 array
# consisting of the elements of a corresponding to the True values
# of bool_idx
print a[bool_idx]  # Prints "[3 4 5 6]"
# We can do all of the above in a single concise statement:
print a[a > 2]     # Prints "[3 4 5 6]"
------------------------------------------------------------------------------------------------------------
# Data Types -- Every numpy array is a grid of elements of the same type. Numpy provides a large set of numeric
datatypes that you can use to construct arrays. Numpy tries to guess a datatype when you create an array, but 
functions that construct arrays usually also include an optional argument to explicitly specify the datatype. 
import numpy as np
x = np.array([1, 2])  # Let numpy choose the datatype
print x.dtype         # Prints "int64"

x = np.array([1.0, 2.0])  # Let numpy choose the datatype
print x.dtype             # Prints "float64"

x = np.array([1, 2], dtype=np.int64)  # Force a particular datatype
print x.dtype                         # Prints "int64"

s = np.array(['test','allan',90], dtype=np.str)
print(s)          # ['test' 'allan' '90']
------------------------------------------------------------------------------------------------------------
# Array Math -- Basic mathematical functions operate elementwise on arrays, and are available both as operator 
overloads and as functions in the numpy module
import numpy as np

x = np.array([[1,2],[3,4]], dtype=np.float64)
y = np.array([[5,6],[7,8]], dtype=np.float64)

print x + y         # [[ 6.0  8.0] , [10.0 12.0]]
print np.add(x, y)  # [[ 6.0  8.0] , [10.0 12.0]]

# Elementwise difference; both produce the array
print x - y                 # [[-4.0 -4.0] , [-4.0 -4.0]]
print np.subtract(x, y)     # [[-4.0 -4.0] , [-4.0 -4.0]]

# Elementwise product; both produce the array
print x * y                   # [[ 5.0 12.0] , [21.0 32.0]]
print np.multiply(x, y)       # [[ 5.0 12.0] , [21.0 32.0]]

# Elementwise division; both produce the array
print x / y             # [[ 0.2  0.33333333] , [ 0.42857143  0.5 ]]
print np.divide(x, y)   # [[ 0.2  0.33333333] , [ 0.42857143  0.5 ]]

# Elementwise square root; produces the array 
print(np.sqrt(x))           # [[ 1.  1.41421356] , [ 1.73205081  2. ]]
print np.sqrt(x[0])         # [ 1.  1.41421356]
------------------------------------------------------------------------------------------------------------
# Note that unlike MATLAB, * is elementwise multiplication, not matrix multiplication. We instead use the dot function 
to compute inner products of vectors, to multiply a vector by a matrix, and to multiply matrices. dot is available both 
as a function in the numpy module and as an instance method of array objects:
import numpy as np
x = np.array([[1,2],[3,4]])
y = np.array([[5,6],[7,8]])

v = np.array([9,10])
w = np.array([11, 12])

# Inner product of vectors; both produce 219
print v.dot(w)     # (9 * 11) + (10 * 12)
print np.dot(v, w)

# Matrix / vector product; both produce the rank 1 array [29 67]
print x.dot(v)      # (1*9)+(2*10)  (3*9)+(4*10)
print np.dot(x, v)

# Matrix / matrix product; both produce the rank 2 array
# [[19 22]                  # how this number came?
#  [43 50]]
print x.dot(y)
print np.dot(x, y)
------------------------------------------------------------------------------------------------------------
# Numpy function - SUM 
import numpy as np
x = np.array([[1,2],[3,4]])
print np.sum(x)  # Compute sum of all elements; prints "10"
print np.sum(x, axis=0)  # Compute sum of each column; prints "[4 6]"
print np.sum(x, axis=1)  # Compute sum of each row; prints "[3 7]"
------------------------------------------------------------------------------------------------------------
# It is possible to to reshape or otherwise manipulate data in arrays. The simplest example of this type of 
operation is transposing a matrix; to transpose a matrix, simply use the T attribute of an array object:
import numpy as np

x = np.array([[1,2], [3,4]])
print x    # Prints "[[1 2]
           #          [3 4]]"
print x.T  # Prints "[[1 3]
           #          [2 4]]"
# Note that taking the transpose of a rank 1 array does nothing:
v = np.array([1,2,3])
print v    # Prints "[1 2 3]"
print v.T  # Prints "[1 2 3]"

a = np.array([[1,4,5],[7,2,9], [10,20,30]])
print(a.T)
[[ 1  7 10]
 [ 4  2 20]
 [ 5  9 30]]
------------------------------------------------------------------------------------------------------------
# Broadcasting is a powerful mechanism that allows numpy to work with arrays of different shapes when performing 
arithmetic operations. Frequently we have a smaller array and a larger array, and we want to use the smaller array
multiple times to perform some operation on the larger array.

# suppose that we want to add a constant vector to each row of a matrix
import numpy as np

# storing the result in the matrix y
x = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])
v = np.array([1, 0, 1])         # This is called single row , 3 column vector v

# Create an empty matrix with the same shape as x
y = np.empty_like(x)
z = np.empty_like(x)
p = np.empty_like(x)
q = np.empty_like(x)
print(x)  # [[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]]
print("----y z below--------")
for i in range(4):       #this is from 0 till 4 so 3 rows
    y[i, :] = x[ i ,:] + v #here x[i: ] means same as string. i (as counter increases)row till end of the rows . E.g. 0-4,1-4,2-4,3-4 etc
    # print y is [[2,2,4], [5,5,7], [8,8,10], [11, 11, 13]]
    z[i  :] = x[ i  :] + v
    # print z is [[2,2,4], [5,5,7], [8,8,10], [11, 11, 13]]
print("-----p q below-------")
for j in range(4):       #this is from 0 till 5 so 4 columns..not sure how this block is different from above y z block of output
    p[  :j] = x[: j ] + v   #here x[: j] means same as string.0 row till j (as counter increases). E.g. 0-0, 0-1,0-2,0-3,0-4 etc
    # print p is [[2,2,4], [5,5,7], [8,8,10], [11, 11, 13]]
    q[: j,] = x[: j,] + v
    # print q is [[2,2,4], [5,5,7], [8,8,10], [11, 11, 13]]
------------------------------------------------------------------------------------------------------------ 
# Broadcasting version as follows - 
import numpy as np

# We will add the vector v to each row of the matrix x,
# storing the result in the matrix y
x = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])
v = np.array([1, 0, 1])
y = x + v  # Add v to each row of x using broadcasting
print y  # Prints "[[ 2  2  4]
         #          [ 5  5  7]
         #          [ 8  8 10]
         #          [11 11 13]]"


TO BE UPDATD !!! 







------------------------------------------------------------------------------------------------------------ 
SciPy --  SciPy builds on Numpy, and provides a large number of functions that operate on numpy arrays and are 
useful for different types of scientific and engineering applications.
Scipy Documentation - https://docs.scipy.org/doc/scipy/reference/index.html

Some basic examples below - 
Scipy has functions to read images from disk into numpy arrays, to write numpy arrays to disk as images, and to resize images. 
import os
from scipy.misc import imread, imsave, imresize

# Read an JPEG image into a numpy array
i1 = os.path('/Users/allangonsalves/Desktop/IMG_0891.JPG')

img = imread(i1)
print img.dtype, img.shape  # Prints "uint8 (400, 248, 3)"

# We can tint the image by scaling each of the color channels
# by a different scalar constant. The image has shape (400, 248, 3);
# we multiply it by the array [1, 0.95, 0.9] of shape (3,);
# numpy broadcasting means that this leaves the red channel unchanged,
# and multiplies the green and blue channels by 0.95 and 0.9
# respectively.
img_tinted = img * [1, 0.95, 0.9]

# Resize the tinted image to be 300 by 300 pixels.
img_tinted = imresize(img_tinted, (300, 300))

# Write the tinted image back to disk
imsave('/Users/allangonsalves/Desktop/IMG_0891_new.JPG', img_tinted)
------------------------------------------------------------------------------------------------------------ 
# To do scientific computing in Python, additional packages (e.g. Numpy, Scipy, Matplotlib) are required .
Check Matlab and python difference at - http://www.pyzo.org/python_vs_matlab.html
SciPy has many modules, classes, and functions available to read data from and write data to a variety of file formats.
# Source for Matlab files - https://docs.scipy.org/doc/scipy/reference/io.html
# The functions scipy.io.loadmat and scipy.io.savemat allow you to read and write MATLAB files.
------------------------------------------------------------------------------------------------------------ 
# Distance betwen two points -- 
1. The function scipy.spatial.distance.pdist computes the distance between all pairs of points in a given set
2. A similar function (scipy.spatial.distance.cdist) computes the distance between all pairs across two sets of points

Example of pdist - 
import numpy as np
from scipy.spatial.distance import pdist, squareform

# Create the following array where each row is a point in 2D space:
# [[0 1]
#  [1 0]
#  [2 0]]
x = np.array([[0, 1], [1, 0], [2, 0]])
print x

# Compute the Euclidean distance between all rows of x.
# d[i, j] is the Euclidean distance between x[i, :] and x[j, :],
# and d is the following array:
# [[ 0.          1.41421356  2.23606798]
#  [ 1.41421356  0.          1.        ]
#  [ 2.23606798  1.          0.        ]]
d = squareform(pdist(x, 'euclidean'))
e = squareform(pdist(x, 'cityblock'))
f = squareform(pdist(x, 'sqeuclidean'))
print d
print(e)
print(f)
Output -- 
[[0 1]
 [1 0]
 [2 0]]
[[ 0.          1.41421356  2.23606798]
 [ 1.41421356  0.          1.        ]
 [ 2.23606798  1.          0.        ]]
[[ 0.  2.  3.]
 [ 2.  0.  1.]
 [ 3.  1.  0.]]
[[ 0.  2.  5.]
 [ 2.  0.  1.]
 [ 5.  1.  0.]]
------------------------------------------------------------------------------------------------------------ 
# Matplotlib -- Matplotlib is a plotting library. In this section give a brief introduction to the 
matplotlib.pyplot module, which provides a plotting system similar to that of MATLAB
# Plotting..before this , learn numpy arange and sine(foundamental of trignometery) functions

x = np.arange(0,16,4,dtype=int)   # arange function parameter(start, stop, increment, and datatype )

# sine function - https://www.youtube.com/watch?v=BDFvoIsnEV4
-----------------------------------------------------------------------------------------------------------
# to plot 2D data
import numpy as np
import matplotlib.pyplot as plt

x = np.arange(0,16,4,dtype=int)   # arange function parameter(start, stop, increment, and datatype )
y = np.sin(x)
print(x)    # [ 0  4  8 12]
print(y)    # [ 0.         -0.7568025   0.98935825 -0.53657292]

plt.plot(x,y)
plt.show()        #This will generate graph of value of y 
----------------------------------------------------------------------------------------------------------
# Plot 2D data with title , legend etc
import numpy as np
import matplotlib.pyplot as plt

# Compute the x and y coordinates for points on sine and cosine curves
x = np.arange(0, 3 * np.pi, 0.1)    #here np.pi is pi value 3.14
y_sin = np.sin(x)
y_cos = np.cos(x)

# Plot the points using matplotlib
plt.plot(x, y_sin)
plt.plot(x, y_cos)
plt.xlabel('x axis label')
plt.ylabel('y axis label')
plt.title('Sine and Cosine')
plt.legend(['Sine', 'Cosine'])
plt.show()
----------------------------------------------------------------------------------------------------------
# subplot -- plot different things in the same figure using the subplot function. 
import numpy as np
import matplotlib.pyplot as plt

# Compute the x and y coordinates for points on sine and cosine curves
x = np.arange(0, 3 * np.pi, 0.1)
y_sin = np.sin(x)
y_cos = np.cos(x)

# Set up a subplot grid that has height 2 and width 1,
# and set the first such subplot as active.
plt.subplot(2, 1, 1)

# Make the first plot
plt.plot(x, y_sin)
plt.title('Sine')

# Set the second subplot as active, and make the second plot.
plt.subplot(2, 1, 2)
plt.plot(x, y_cos)
plt.title('Cosine')

# Show the figure.
plt.show()
Output --- check source link - http://cs231n.github.io/python-numpy-tutorial/


